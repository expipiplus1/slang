name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [linux, macos, windows]
        config: [release]
        platform: [x64, aarch64]
        test-category: [smoke]
        include:
          - {os: linux, runs-on: ubuntu-20.04, compiler: gcc}
          - {os: windows, runs-on: windows-latest, compiler: cl}
          - {os: macos, runs-on: macos-latest, compiler: clang}

          - {build-slang-llvm: false}
          - {os: linux, platform: x86_64, build-slang-llvm: true}
          - {os: windows, platform: x86_64, build-slang-llvm: true}
          - {os: macos, platform: aarch64, build-slang-llvm: true}
      fail-fast: false
    runs-on: ${{ matrix.runs-on }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Setup
        uses: ./.github/actions/common-setup
        with:
          os: ${{matrix.os}}
          compiler: ${{matrix.compiler}}
          platform: ${{matrix.platform}}
          config: ${{matrix.config}}
          build-llvm: ${{matrix.build-slang-llvm}}

      - name: Build slang generators
        run: |
          cmake --workflow --preset generators --fresh
          mkdir build-platform-generators
          cmake --install build --config Release --component generators --prefix build-platform-generators

      - name: Change dev tools to host arch (windows)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.platform == 'aarch64' && 'amd64_arm64' || 'amd64'}}

      - name: Change dev tools to host arch (linux and macos)
        run: |
          if [[ "${{matrix.os}}" == "linux" && "${{matrix.platform}}" == "aarch64" ]]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi
          if [ "${{matrix.platform}}" = "aarch64" ]; then
            export CMAKE_OSX_ARCHITECTURES="-DCMAKE_OSX_ARCHITECTURES=arm64"
          else if [ "${{matrix.platform}}" = "x64" ]; then
            export CMAKE_OSX_ARCHITECTURES="-DCMAKE_OSX_ARCHITECTURES=x86_64"
          fi

          echo "CC=$CC" >> "$GITHUB_ENV"
          echo "CXX=$CXX" >> "$GITHUB_ENV"
          echo "CMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES" >> "$GITHUB_ENV"

      - name: Build Slang
        run: |
          if [[ "${{ matrix.os }}" == "windows" && "${{ matrix.config }}" != "release" ]]; then
              echo "Please see ci.yml for the steps to make debug builds work on Windows" >&2
              exit 1
          fi

          cmake --preset default --fresh \
            -DSLANG_GENERATORS_PATH=build-platform-generators/bin \
            -DSLANG_ENABLE_EXAMPLES=OFF \
            -DSLANG_SLANG_LLVM_FLAVOR=DISABLE

          cmake --workflow --preset "${{matrix.config}}"

      - name: File check
        run: |
          find build/dist-release ! -iname '*.md' ! -iname '*.h' -type f | xargs file

      - name: Package Slang
        id: package
        run: |
          # For the release, also generate a tar.gz file
          cpack --preset release -G TGZ

          triggering_ref=${{ github.ref_name }}
          version=${triggering_ref#v}
          os_name=${{ matrix.os }}
          arch_name=${{ matrix.platform }}
          arch_name=${arch_name/x64/x86_64}
          base=$(pwd)/slang-${version}-${os_name}-${arch_name}

          mv "$(pwd)/build/dist-${config}/slang.zip" "${base}.zip"
          echo "SLANG_BINARY_ARCHIVE_ZIP=${base}.zip" >> $GITHUB_OUTPUT

          mv "$(pwd)/build/dist-${config}/slang.tar.gz" "${base}.tar.gz"
          echo "SLANG_BINARY_ARCHIVE_TAR=${base}.tar.gz" >> $GITHUB_OUTPUT
      - name: UploadBinary
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.package.outputs.SLANG_BINARY_ARCHIVE_ZIP }}
            ${{ steps.package.outputs.SLANG_BINARY_ARCHIVE_TAR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
