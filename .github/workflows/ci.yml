name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        config: ['debug', 'release']
        platform: ['x64']
        exclude:
          - os: macos-latest
            config: debug
        include:
          - os: ubuntu-20.04
            compiler: gcc
          - os: ubuntu-20.04
            compiler: clang
          - os: macos-latest
            compiler: clang
          - os: windows-latest
            compiler: cl
          # Smoke by default, overwrite with full tests on release*gcc*x64
          - test-category: smoke
          - compiler: gcc
            config: release
            platform: x64
            test-category: full
          # On Windows release, quick by default and full on x64
          - os: windows-latest
            config: release
            test-category: quick
          - os: windows-latest
            config: release
            platform: x64
            test-category: full
      fail-fast: false
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Setup
        uses: ./.github/actions/common-setup
        with:
          os: ${{matrix.os}}
          compiler: ${{matrix.compiler}}
          platform: ${{matrix.platform}}
          config: ${{matrix.config}}
      - name: Build Slang
        run: |
          if [[ "${{ matrix.os }}" =~ "windows" && "${{ matrix.config }}" != "release" ]]; then
            # Doing a debug build will try to link against a release built llvm, this
            # is a problem on Windows, so make slang-llvm in release build and use
            # that as though it's a fetched binary via these presets.
            cmake --workflow --preset slang-llvm
            # Configure, pointing to our just-generated slang-llvm archive
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=FETCH_BINARY \
              -DSLANG_SLANG_LLVM_BINARY_URL=build/dist-release/slang-slang-llvm
            cmake --workflow --preset "${{matrix.config}}"
          else
            # Otherwise, use the system llvm we have just build or got from the
            # cache in the setup phase
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM
            cmake --workflow --preset "${{matrix.config}}"
          fi
      - name: Test Slang
        run: |
          shopt -s nullglob
          cp --target-directory=$lib_dir swiftshader/*.so || :
          cp --target-directory=$bin_dir swiftshader/*.dll || :
          export SLANG_RUN_SPIRV_VALIDATION=1
          $bin_dir/slang-test \
            -travis \
            -category ${{ matrix.test-category }} \
            -api all-dx12 \
            -expected-failure-list tests/expected-failure-github.txt
      - uses: actions/upload-artifact@v3
        with:
          name: slang-build-${{matrix.os}}-${{matrix.platform}}-${{matrix.compiler}}-${{matrix.config}}
          # The install directory used in the packaging step
          path: build/dist-${{matrix.config}}/**/slang/*

  full-gpu-tests:
    runs-on: [Windows, self-hosted]
    timeout-minutes: 100
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
        compiler: ['cl']
        platform: ['x64']
        config: ['release']
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          fetch-depth: '0'
      - name: Setup
        uses: ./.github/actions/common-setup
        with:
          os: ${{matrix.os}}
          compiler: ${{matrix.compiler}}
          platform: ${{matrix.platform}}
          config: ${{matrix.config}}
      - name: Build Slang
        run: |
          cmake --preset default --fresh \
            -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM
          cmake --workflow --preset "${{matrix.config}}"
      - name: Test SPIR-V Direct
        id: spirv
        run: |
          export SLANG_RUN_SPIRV_VALIDATION=1
          $bin_dir/slang-test \
            -use-test-server \
            -server-count 8 \
            -emit-spirv-directly \
            -api vk \
            -expected-failure-list tests/expected-failure.txt
      - name: Test
        # Run even if the previous step fails
        if: success() || steps.spirv.conclusion == 'failure'
        run: |
          $bin_dir/slang-test \
            -use-test-server \
            -server-count 8 \
            -api all-cpu
